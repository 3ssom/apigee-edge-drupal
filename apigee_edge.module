<?php

/**
 * @file
 * Main module file for Apigee Edge.
 */

use Apigee\Edge\Exception\ClientErrorException;
use Drupal\apigee_edge\Entity\Developer;
use Drupal\apigee_edge\JobExecutor;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\user\UserInterface;

define('APIGEE_EDGE_ERROR_CODE_DEVELOPER_ALREADY_EXITS', 'developer.service.DeveloperAlreadyExists');
define('APIGEE_EDGE_ERROR_CODE_DEVELOPER_DOES_NOT_EXITS', 'developer.service.DeveloperDoesNotExist');

/**
 * Implements hook_menu_links_discovered_alter().
 */
function apigee_edge_menu_links_discovered_alter(array &$links) {
  $devAppLabel = \Drupal::entityTypeManager()
    ->getDefinition('developer_app')
    ->getPluralLabel();

  $links['apigee_edge.my_apps'] = [
    'title' => t('My @devAppLabel', ['@devAppLabel' => $devAppLabel]),
    'route_name' => 'apigee_edge.user.my_apps',
    'weight' => -30,
    'menu_name' => 'account',
  ];
}

/**
 * Implements hook_theme().
 */
function apigee_edge_theme() {
  return [
    'developer_app' => [
      'render element' => 'elements',
    ],
    'status_property' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function apigee_edge_entity_type_alter(array &$entity_types) {
  $config = \Drupal::config('apigee_edge.entity_labels');

  $app_label_singular = $config->get('app_label_singular');
  $app_label_plural = $config->get('app_label_plural');
  $api_product_label_singular = $config->get('api_product_label_singular');
  $api_product_label_plural = $config->get('api_product_label_plural');

  if ($app_label_singular && $app_label_plural) {
    // Also set the label for consistency reasons.
    $entity_types['developer_app']->set('label', new TranslatableMarkup($app_label_singular));
    $entity_types['developer_app']->set('label_singular', new TranslatableMarkup($app_label_singular));
    $entity_types['developer_app']->set('label_plural', new TranslatableMarkup($app_label_plural));
    $entity_types['developer_app']->set('label_count', [
      'singular' => "@count {$app_label_singular}",
      'plural' => "@count {$app_label_plural}",
    ]);
  }

  if ($api_product_label_singular && $api_product_label_plural) {
    // Also set the label for consistency reasons.
    $entity_types['api_product']->set('label', new TranslatableMarkup($api_product_label_singular));
    $entity_types['api_product']->set('label_singular', new TranslatableMarkup($api_product_label_singular));
    $entity_types['api_product']->set('label_plural', new TranslatableMarkup($api_product_label_plural));
    $entity_types['api_product']->set('label_count', [
      'singular' => "@count {$api_product_label_singular}",
      'plural' => "@count {$api_product_label_plural}",
    ]);
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function apigee_edge_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['first_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('First name'))
      ->setDescription(t('Your first name.'))
      ->setSetting('max_length', 32)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => '-11',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['last_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Last name'))
      ->setDescription(t('Your last name.'))
      ->setSetting('max_length', 32)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => '-11',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['apigee_edge_developer_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Apigee Edge developer ID'))
      ->setSettings([
        'target_type' => 'developer_app',
      ]);
  }

  return $fields;
}

/**
 * Implements hook_user_presave().
 *
 * TODO Take (configurable?) actions if a user could not be saved in Drupal but
 * it has been in Edge.
 */
function apigee_edge_user_presave(UserInterface $account) {
  $developer_id = NULL;
  try {
    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
    $developer = Developer::createFromDrupalUser($account);
    $developer->save();
    $account->set('apigee_edge_developer_id', $developer->getDeveloperId());
  }
  catch (\Exception $exception) {
    $previous = $exception->getPrevious();
    $context = [
      '@developer' => $account->getEmail(),
      '@message' => (string) $exception,
      '@operation' => $account->isNew() ? 'create' : 'update',
    ];
    if ($previous instanceof ClientErrorException && $previous->getEdgeErrorCode()) {
      if ($previous->getEdgeErrorCode() === APIGEE_EDGE_ERROR_CODE_DEVELOPER_DOES_NOT_EXITS) {
        \Drupal::logger('apigee_edge')
          ->info('Could not update @developer developer entity because it does not exist on Edge. Automatically trying to create a new developer entity.', $context);
        try {
          // Forcibly mark developer entity as new to send POST request to Edge
          // instead of PUT. This should be a better way then clearing
          // "originalEmail" property's value on the entity.
          $developer->enforceIsNew(TRUE);
          $developer->save();
          $developer_id = $developer->getDeveloperId();
        }
        catch (\Exception $e) {
          $context = [
            '@developer' => $account->getEmail(),
            '@message' => (string) $exception,
          ];
          watchdog_exception('apigee_edge', $exception, 'Could not create developer entity: @developer. @message %function (line %line of %file). <pre>@backtrace_string</pre>', $context);
        }
      }
      elseif ($previous->getEdgeErrorCode() === APIGEE_EDGE_ERROR_CODE_DEVELOPER_ALREADY_EXITS) {
        \Drupal::logger('apigee_edge')
          ->info($previous->getMessage());
        $developer = Developer::load($account->getEmail());
        if ($developer) {
          $developer_id = $developer->getDeveloperId();
        }
        else {
          \Drupal::logger('apigee_edge')->error("Unable to save @developer developer's developer id on user", $context);
        }
      }
    }
    else {
      watchdog_exception('apigee_edge', $exception, 'Could not @operation developer entity: @developer. @message %function (line %line of %file). <pre>@backtrace_string</pre>', $context);
    }
  }

  if ($developer_id !== NULL) {
    $account->set('apigee_edge_developer_id', $developer_id);
  }
}

/**
 * Implements hook_user_cancel().
 */
function apigee_edge_user_cancel(array $edit, UserInterface $account, $method) {
  if ($method === 'user_cancel_block_unpublish' || $method === 'user_cancel_block') {
    try {
      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
      $developer = Developer::createFromDrupalUser($account);
      $developer->save();
    }
    catch (\Exception $exception) {
      $context = [
        '@developer' => $account->getEmail(),
        '@message' => (string) $exception,
      ];
      watchdog_exception('apigee_edge', $exception, 'Could not block @developer developer. @message %function (line %line of %file). <pre>@backtrace_string</pre>', $context);
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function apigee_edge_user_delete(UserInterface $account) {
  try {
    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
    $developer = Developer::load($account->getEmail());
    $developer->delete();
  }
  catch (\Exception $exception) {
    $context = [
      '@developer' => $account->getEmail(),
      '@message' => (string) $exception,
    ];
    watchdog_exception('apigee_edge', $exception, 'Could not delete @developer developer entity. @message %function (line %line of %file). <pre>@backtrace_string</pre>', $context);
  }
}

/**
 * Implements hook_cron().
 */
function apigee_edge_cron() {
  /** @var \Drupal\apigee_edge\JobExecutor $executor */
  $executor = \Drupal::service('apigee_edge.job_executor');
  // Schedules 100 items from the job table.
  // The reason of this is to avoid race conditions.
  for ($i = 0; $i < 100; $i++) {
    if (($job = $executor->select())) {
      $executor->cast($job);
    }
    else {
      break;
    }
  }
}

/**
 * Returns the job executor instance.
 *
 * @return \Drupal\apigee_edge\JobExecutor
 *   The job executor instance.
 */
function apigee_edge_get_executor(): JobExecutor {
  return \Drupal::service('apigee_edge.job_executor');
}
