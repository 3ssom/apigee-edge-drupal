<?php

/**
 * @file
 * Main module file for Apigee Edge.
 */

use Apigee\Edge\Exception\ClientErrorException;
use Drupal\apigee_edge\JobExecutor;
use Drupal\apigee_edge\Entity\Developer;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\user\UserInterface;

define('APIGEE_EDGE_ERROR_CODE_DEVELOPER_DOES_NOT_EXITS', 'developer.service.DeveloperDoesNotExist');

/**
 * Implements hook_theme().
 */
function apigee_edge_theme() {
  return [
    'developer_app' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function apigee_edge_entity_type_alter(array &$entity_types) {
  $config = \Drupal::config('apigee_edge.entity_labels');
  $developer_app_label = $config->get('developer_app_label');
  if (isset($developer_app_label)) {
    $entity_types['developer_app']->set('label', new TranslatableMarkup($developer_app_label));
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function apigee_edge_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['first_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('First name'))
      ->setDescription(t('Your first name.'))
      ->setSetting('max_length', 32)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => '-11',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['last_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Last name'))
      ->setDescription(t('Your last name.'))
      ->setSetting('max_length', 32)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => '-11',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_user_insert().
 */
function apigee_edge_user_insert(UserInterface $account) {
  try {
    $developer = Developer::createFromDrupalUser($account);
    $developer->save();
  }
  catch (\Exception $exception) {
    $context = [
      '@developer' => $account->getEmail(),
      '@message' => (string) $exception,
      '@trace' => $exception->getTraceAsString(),
    ];
    \Drupal::logger('apigee_edge')
      ->error('Could not create developer entity: @developer. @message, @trace', $context);
  }
}

/**
 * Implements hook_user_update().
 */
function apigee_edge_user_update(UserInterface $account) {
  try {
    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
    $developer = Developer::createFromDrupalUser($account);
    $developer->save();
  }
  catch (\Exception $exception) {
    $previous = $exception->getPrevious();
    $context = [
      '@developer' => $account->getEmail(),
      '@message' => (string) $exception,
      '@trace' => $exception->getTraceAsString(),
    ];
    if ($previous instanceof ClientErrorException && $previous->getEdgeErrorCode() === APIGEE_EDGE_ERROR_CODE_DEVELOPER_DOES_NOT_EXITS) {

      \Drupal::logger('apigee_edge')
        ->notice('Could not update @developer developer entity because it does not exist on Edge. Automatically trying to create a new developer entity.', $context);
      try {
        // Forcibly mark developer entity as new to send POST request to Edge
        // instead of PUT. This should be a better way then clearing
        // "originalEmail" property's value on the entity.
        $developer->enforceIsNew(TRUE);
        $developer->save();
      }
      catch (\Exception $e) {
        $context = [
          '@developer' => $account->getEmail(),
          '@message' => (string) $exception,
          '@trace' => $exception->getTraceAsString(),
        ];
        \Drupal::logger('apigee_edge')
          ->error('Could not create developer entity: @developer. @message, @trace', $context);
      }
    }
    else {
      \Drupal::logger('apigee_edge')
        ->error('Could not update developer entity: @developer. @message, @trace', $context);
    }
  }
}

/**
 * Implements hook_user_cancel().
 */
function apigee_edge_user_cancel(array $edit, UserInterface $account, $method) {
  if ($method === 'user_cancel_block_unpublish' || $method === 'user_cancel_block') {
    try {
      /** @var Developer $developer */
      $developer = Developer::createFromDrupalUser($account);
      $developer->save();
    }
    catch (\Exception $exception) {
      $context = [
        '@developer' => $account->getEmail(),
        '@message' => (string) $exception,
        '@trace' => $exception->getTraceAsString(),
      ];
      \Drupal::logger('apigee_edge')
        ->error('Could not block developer entity: @developer. @message, @trace', $context);
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function apigee_edge_user_delete(UserInterface $account) {
  try {
    /** @var Developer $developer */
    $developer = Developer::load($account->getEmail());
    $developer->delete();
  }
  catch (\Exception $exception) {
    $context = [
      '@developer' => $account->getEmail(),
      '@message' => (string) $exception,
      '@trace' => $exception->getTraceAsString(),
    ];
    \Drupal::logger('apigee_edge')
      ->error('Could not delete developer entity: @developer. @message, @trace', $context);
  }
}

/**
 * Implements hook_cron().
 */
function apigee_edge_cron() {
  /** @var \Drupal\apigee_edge\JobExecutor $executor */
  $executor = \Drupal::service('apigee_edge.job_executor');
  // Schedules 100 items from the job table.
  // The reason of this is to avoid race conditions.
  for ($i = 0; $i < 100; $i++) {
    if (($job = $executor->select())) {
      $executor->cast($job);
    }
    else {
      break;
    }
  }
}

/**
 * Returns the job executor instance.
 *
 * @return \Drupal\apigee_edge\JobExecutor
 *   The job executor instance.
 */
function apigee_edge_get_executor(): JobExecutor {
  return \Drupal::service('apigee_edge.job_executor');
}
