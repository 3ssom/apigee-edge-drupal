<?php

/**
 * @file
 * Main module file for Apigee Edge.
 */

use Apigee\Edge\Api\Management\Entity\Developer;
use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
use Drupal\apigee_edge\Job\DeveloperCreate;
use Drupal\apigee_edge\Job\DeveloperDelete;
use Drupal\apigee_edge\Job\DeveloperSetStatus;
use Drupal\apigee_edge\Job\DeveloperUpdate;
use Drupal\apigee_edge\Job\JobList;
use Drupal\apigee_edge\JobExecutor;
use Drupal\apigee_edge\SDKConnector;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function apigee_edge_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['first_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('First name'))
      ->setDescription(t('Your first name.'))
      ->setSetting('max_length', 32)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => '-11',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['last_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Last name'))
      ->setDescription(t('Your last name.'))
      ->setSetting('max_length', 32)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => '-11',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_user_insert().
 */
function apigee_edge_user_insert(UserInterface $account) {
  $developer_data = [
    'userName' => $account->getAccountName(),
    'email' => $account->getEmail(),
    'firstName' => $account->get('first_name')->value,
    'lastName' => $account->get('last_name')->value,
  ];

  $jobs = new JobList(TRUE);
  $developer = new Developer($developer_data);
  $jobs->addJob(new DeveloperCreate($developer));
  if (!$account->isActive()) {
    $jobs->addJob(new DeveloperSetStatus($developer->getEmail(), Developer::STATUS_INACTIVE));
  }

  apigee_edge_get_executor()->call($jobs);
}

/**
 * Implements hook_user_update().
 */
function apigee_edge_user_update(UserInterface $account) {
  $jobs = new JobList(TRUE);
  $developer = apigee_edge_get_developer($account);

  $first_name = $account->get('first_name')->value;
  $last_name = $account->get('last_name')->value;
  $original_first_name = $account->original->get('first_name')->value;
  $original_last_name = $account->original->get('last_name')->value;
  if ($first_name !== $original_first_name || $last_name !== $original_last_name) {
    $developer->setFirstName($first_name);
    $developer->setLastName($last_name);
    $jobs->addJob(new DeveloperUpdate($developer));
  }

  if ($account->isBlocked() && $account->original->isActive()) {
    $jobs->addJob(new DeveloperSetStatus($developer->getEmail(), Developer::STATUS_INACTIVE));
  }
  elseif ($account->isActive() && $account->original->isBlocked()) {
    $jobs->addJob(new DeveloperSetStatus($developer->getEmail(), Developer::STATUS_ACTIVE));
  }

  if (!$jobs->isEmpty()) {
    apigee_edge_get_executor()->call($jobs);
  }
}

/**
 * Implements hook_user_cancel().
 */
function apigee_edge_user_cancel(array $edit, UserInterface $account, $method) {
  if ($method === 'user_cancel_block_unpublish' || $method === 'user_cancel_block') {
    apigee_edge_get_executor()->call(new DeveloperSetStatus($account->getEmail(), Developer::STATUS_INACTIVE));
  }
}

/**
 * Implements hook_user_delete().
 */
function apigee_edge_user_delete(UserInterface $account) {
  apigee_edge_get_executor()->call(new DeveloperDelete($account->getEmail()));
}

/**
 * Implements hook_cron().
 */
function apigee_edge_cron() {
  /** @var \Drupal\apigee_edge\JobExecutor $executor */
  $executor = \Drupal::service('apigee_edge.job_executor');
  // Schedules 100 items from the job table.
  // The reason of this is to avoid race conditions.
  for ($i = 0; $i < 100; $i++) {
    if (($job = $executor->select())) {
      $executor->cast($job);
    }
    else {
      break;
    }
  }
}

/**
 * Returns the job executor instance.
 *
 * @return \Drupal\apigee_edge\JobExecutor
 */
function apigee_edge_get_executor() : JobExecutor {
  return \Drupal::service('apigee_edge.job_executor');
}

/**
 * Returns the SDK Connector instance.
 *
 * @return \Drupal\apigee_edge\SDKConnector
 */
function apigee_edge_get_connector() : SDKConnector {
  return \Drupal::service('apigee_edge.sdk_connector');
}

/**
 * Loads the remote apigee developer for a local account.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   Locla account.
 *
 * @return \Apigee\Edge\Api\Management\Entity\DeveloperInterface
 */
function apigee_edge_get_developer(AccountInterface $account) : DeveloperInterface {
  /** @var \Apigee\Edge\Api\Management\Controller\DeveloperController $dc */
  $dc = \Drupal::service('apigee_edge.sdk_connector')->getDeveloperController();
  /** @var Developer $developer */
  $developer = $dc->load($account->getEmail());

  return $developer;
}
